components:
  - global_env: &global_env
      env:
        DOCKER_HUB_USERNAME: shepmaster
        GH_CONTAINER_REGISTRY_USERNAME: mccue-software-solutions
        AWS_ACCESS_KEY_ID: AKIAWESVHZ3JQAY5NM5K
        TARGZ_URL_latest: https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
        TARGZ_SHA_latest: 36cd5e9661360a8fece4fd31cf678cd6611f3742633dab3b3244e037ba0b095f
        TARGZ_FOLDER_latest: jdk-21
        TARGZ_URL_valhalla: https://download.java.net/java/early_access/valhalla/20/openjdk-20-valhalla+20-75_linux-x64_bin.tar.gz
        TARGZ_SHA_valhalla: cd0a008aee632cbff2f9c529aba17f4ad7f733cd974d36d2293169bc35e73ae7
        TARGZ_FOLDER_valhalla: jdk-20
        TARGZ_URL_early_access: https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
        TARGZ_SHA_early_access: 36cd5e9661360a8fece4fd31cf678cd6611f3742633dab3b3244e037ba0b095f
        TARGZ_FOLDER_early_access: jdk-22

  - checkout: &checkout
      name: "Checkout code"
      uses: actions/checkout@v3

  # This should only be used when we know that the code being tested
  # doesn't make use of our secrets or elevated GitHub token.
  - checkout_pr: &checkout_pr
      name: "Checkout code"
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

  - docker_buildx: &docker_buildx
      name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: >-
          image=moby/buildkit:v0.11.6

  - login_ghcr: &login_ghcr
      name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

  - login_docker_hub: &login_docker_hub
      name: "Login to Docker Hub"
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

  - build_compiler_containers_job: &build_compiler_containers_job
      name: "Build ${{ matrix.channel }} container"
      runs-on: ubuntu-latest

      strategy:
        matrix:
          channel: [latest, valhalla, early_access]

  - build_compiler_containers_job_env: &build_compiler_containers_job_env
      IMAGE_NAME: ghcr.io/mccue-software-solutions/java-playground-ci-${{ matrix.channel }}
      TARGZ_URL: TARGZ_URL_${{matrix.channel}}
      TARGZ_SHA: TARGZ_SHA_${{matrix.channel}}
      TARGZ_FOLDER: TARGZ_FOLDER_${{matrix.channel}}

  - build_compiler_containers_final: &build_compiler_containers_final
      name: "Build and push container"
      uses: docker/build-push-action@v4
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          TARGZ_URL=${{ env.TARGZ_URL }}
          TARGZ_SHA=${{ env.TARGZ_SHA }}
          TARGZ_FOLDER=${{ env.TARGZ_FOLDER }}
        pull: true
        push: true
        tags: |-
          ${{ env.IMAGE_NAME }}:${{ github.run_id }}

  - pull_containers: &pull_containers
      name: "Pull containers"
      run: |-
        echo ghcr.io/integer32llc/rust-playground-ci-{rust-{stable,beta,nightly},tool-{clippy,rustfmt,miri}}:${{ github.run_id }} | xargs -n1 docker pull

  - rename_all_containers: &rename_all_containers
      name: "Rename containers"
      run: |-
        for c in stable beta nightly; do
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} ghcr.io/integer32llc/rust-playground-ci-rust-$c
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} shepmaster/rust-$c
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} rust-$c
        done

  - pull_current_container: &pull_current_container
      name: "Pull container"
      run: |-
        docker pull ${{ env.IMAGE_NAME }}:${{ github.run_id }}

  - rename_current_container: &rename_current_container
      name: "Rename container"
      run: |-
        docker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.IMAGE_NAME }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.DOCKER_HUB_IMAGE_NAME }}

  - push_current_container: &push_current_container
      name: "Push container"
      run: |-
        docker push ${{ env.IMAGE_NAME }}
        docker push ${{ env.DOCKER_HUB_IMAGE_NAME }}

workflows:
  ci:
    name: "Validate everything"

    'on':
      push:
      pull_request_target:
        types: [labeled]
        branches:
          - main

    <<: *global_env

    jobs:
      build_compiler_containers:
        <<: *build_compiler_containers_job
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"
        env:
          <<: *build_compiler_containers_job_env

        steps:
          - *checkout_pr
          - *docker_buildx
          - *login_ghcr
          - *build_compiler_containers_final

      build_backend:
        name: "Build backend"
        runs-on: ubuntu-latest
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"

        steps:
          - *checkout_pr

          - name: "Install Rust"
            uses: dtolnay/rust-toolchain@stable
            with:
              components: rustfmt

          - name: "Cache Cargo intermediate products"
            uses: actions/cache@v3
            with:
              path: |-
                ~/.cargo/registry
                ~/.cargo/git
                ui/target
              key: ${{ runner.os }}-cargo-${{ hashFiles('ui/**/Cargo.lock') }}-2

          - name: "Format server"
            run: cargo fmt --manifest-path ui/Cargo.toml --all --check

          - name: "Build backend"
            run: >-
              mkdir -p ui/target;
              docker
              run
              --rm
              -v $PWD/ui:/ui
              -v ~/.cargo/git:/root/.cargo/git
              -v ~/.cargo/registry:/root/.cargo/registry
              --workdir /ui
              rust:alpine
              sh -c '
                apk add musl-dev openssl-dev openssl-libs-static
              
                # Adding -C relocation-model=static due to
                # https://github.com/rust-lang/rust/issues/95926
              
                # Adding this to find the statically-built version
                export OPENSSL_NO_PKG_CONFIG=1 OPENSSL_STATIC=1 OPENSSL_DIR=/usr/
              
                # Unit tests
                cargo rustc --tests --locked -- -C relocation-model=static;
              
                test_bin=$(find target/debug/deps/ -name "ui*" -type f -perm -a=x);
                mv "${test_bin}" target/unit_tests;
              
                # Primary binary
                cargo rustc --locked --release -- -C relocation-model=static;
                mv target/release/ui target/ui;
              '

          - name: "Restore permissions"
            run: >-
              sudo chown -R runner:docker ~/.cargo/ ui/target

          - name: "Save backend artifact"
            uses: actions/upload-artifact@v3
            with:
              name: backend
              path: |
                ui/target/ui
                ui/target/unit_tests

      build_frontend:
        name: "Build frontend"
        runs-on: ubuntu-latest
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"

        steps:
          - *checkout_pr

          - name: "Get yarn cache directory path"
            id: yarn-cache-dir-path
            run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

          - name: "Cache yarn intermediate products"
            uses: actions/cache@v3
            with:
              path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |-
                ${{ runner.os }}-yarn-

          - name: "Configure node"
            uses: actions/setup-node@v3
            with:
              node-version: 18.14

          - name: "Install dependencies"
            run: >-
              yarn --cwd ui/frontend/

          - name: "Run tests"
            run: >-
              yarn --cwd ui/frontend/ test

          - name: "Lint"
            run: >-
              yarn --cwd ui/frontend/ test:lint

          - name: "Style"
            run: >-
              yarn --cwd ui/frontend/ test:style

          - name: "Build frontend"
            run: >-
              yarn --cwd ui/frontend/ run build:production

          - name: "Save frontend artifact"
            uses: actions/upload-artifact@v3
            with:
              name: frontend
              path: ui/frontend/build

      release_artifacts:
        name: "Release artifacts"
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
        permissions:
          contents: read
          id-token: write

        steps:
          - *login_ghcr

          - name: "Login to Docker Hub"
            uses: docker/login-action@v2
            with:
              username: ${{ env.DOCKER_HUB_USERNAME }}
              password: ${{ secrets.DOCKER_HUB_TOKEN }}

          - *pull_containers
          - *rename_all_containers

          - name: "Push containers"
            run: |-
              for c in stable beta nightly; do
                docker push ghcr.io/integer32llc/rust-playground-ci-rust-$c
                docker push shepmaster/rust-$c
              done

          - name: "Download backend"
            uses: actions/download-artifact@v3
            with:
              name: backend
              path: server/

          - name: "Download frontend"
            uses: actions/download-artifact@v3
            with:
              name: frontend
              path: server/build/

          - name: "Configure AWS credentials (i32)"
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-2

          - name: "Push backend (i32)"
            run: |-
              aws s3 cp server/ui s3://playground-artifacts-i32

          - name: "Push frontend (i32)"
            run: |-
              aws s3 sync server/build/ s3://playground-artifacts-i32/build

          - name: "Configure AWS credentials (rust-lang)"
            uses: aws-actions/configure-aws-credentials@v2
            with:
              role-skip-session-tagging: true
              role-to-assume: arn:aws:iam::890664054962:role/upload-playground-artifacts
              aws-region: us-west-1

          - name: "Push backend (rust-lang)"
            run: |-
              aws s3 cp server/ui s3://rust-playground-artifacts

          - name: "Push frontend (rust-lang)"
            run: |-
              aws s3 sync server/build/ s3://rust-playground-artifacts/build


  cron:
    name: "Scheduled rebuild"

    'on':
      workflow_dispatch:
      schedule:
        # Nightlies are available ~1am UTC, should definitely be out by 2am
        - cron:  '7 2 * * *'

    <<: *global_env

    jobs:
      build_compiler_containers:
        <<: *build_compiler_containers_job
        env:
          <<: *build_compiler_containers_job_env
          DOCKER_HUB_IMAGE_NAME: javaplayground/${{ matrix.channel }}
        continue-on-error: true

        steps:
          - *checkout
          - *docker_buildx
          - *login_ghcr
          - *login_docker_hub
          - *build_compiler_containers_final

          - *pull_current_container
          - *rename_current_container
          - *push_current_container